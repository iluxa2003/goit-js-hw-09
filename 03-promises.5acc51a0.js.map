{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,GADYC,SAASC,cAAc,uBAC3BD,SAASC,cAAc,sBAC/BC,EAAOF,SAASC,cAAc,oBAC9BE,EAASH,SAASC,cAAc,sBAGtC,SAASG,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAQtB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACLN,EACFI,EAAQ,uBAAwCG,OAAfT,EAAS,QAAYS,OAANR,EAAM,OAEpDM,EAAK,sBAAuCE,OAAfT,EAAS,QAAYS,OAANR,EAAM,SAErDA,MAIFS,MAAK,SAAAC,GACJC,EAAApB,GAASqB,OAAOC,QAAQ,uBAAwCL,OAAfT,EAAS,QAAYS,OAANR,EAAM,UAEvEc,OAAM,SAAAC,GACLJ,EAAApB,GAASqB,OAAOI,QAAQ,sBAAqCR,OAAfT,EAAS,QAAYS,OAANR,EAAM,UA1B5DN,SAASC,cAAc,SA4C/BsB,iBAAiB,UAJL,SAAAC,GACfA,EAAMC,iBAZR,WAME,IAAK,IAAIC,EAAI,EAAGA,EAAIC,SAASxB,EAAOa,OAAQU,IAE1CtB,EAAcsB,EAAI,EADFC,SAAS5B,EAAMiB,OAASW,SAASzB,EAAKc,OAASU,GAMjEE,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst subButton = document.querySelector('button[type=submit]');\nconst delay = document.querySelector('input[name=delay]');\nconst step = document.querySelector('input[name=step]');\nconst amount = document.querySelector('input[name=amount]');\nconst form = document.querySelector('.form');\n// position, delay\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  // if (shouldResolve) {\n  //   // Fulfill\n  //   Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  // } else {\n  //   // Reject\n  //   Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  // }\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n\n  promise\n    .then(value => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(error => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\nfunction repetable() {\n  // for(let i = 0; i<parseInt(amount.value) ;i++){\n  // const special = (parseInt(delay.value) + parseInt(step.value)*i)\n  //   // const special = delay.value + step.value*i\n  //   setTimeout(createPromise,special,i+1, special)\n  // }\n  for (let i = 0; i < parseInt(amount.value); i++) {\n    const special = parseInt(delay.value) + parseInt(step.value) * i;\n    createPromise(i + 1, special);\n  }\n}\nconst starting = event => {\n  event.preventDefault();\n  repetable();\n};\nform.addEventListener('submit', starting);\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$delay","document","querySelector","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay1","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","concat","then","value","$parcel$interopDefault","Notify","success","catch","error","failure","addEventListener","event","preventDefault","i","parseInt","$ce04d3a99e08e73b$var$repetable"],"version":3,"file":"03-promises.5acc51a0.js.map"}