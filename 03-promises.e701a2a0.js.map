{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SACkBC,SAASC,cAAc,uBAAzC,MACMC,EAAQF,SAASC,cAAc,qBAC/BE,EAAOH,SAASC,cAAc,oBAC9BG,EAASJ,SAASC,cAAc,sBAGtC,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAQtB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACLN,EACFI,EAAQ,uBAAqBN,QAAiBC,OAE5CM,EAAK,sBAAoBP,QAAiBC,SAE7CA,MAIFQ,MAAKC,IACJC,EAAAnB,GAASoB,OAAOC,QAAQ,uBAAqBb,QAAiBC,UAE/Da,OAAMC,IACLJ,EAAAnB,GAASoB,OAAOI,QAAQ,sBAAoBhB,QAAeC,UA1BpDP,SAASC,cAAc,SA4C/BsB,iBAAiB,UAJLC,IACfA,EAAMC,iBAZR,WAME,IAAK,IAAIC,EAAI,EAAGA,EAAIC,SAASvB,EAAOY,OAAQU,IAE1CrB,EAAcqB,EAAI,EADFC,SAASzB,EAAMc,OAASW,SAASxB,EAAKa,OAASU,GAMjEE","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst subButton = document.querySelector('button[type=submit]');\nconst delay = document.querySelector('input[name=delay]');\nconst step = document.querySelector('input[name=step]');\nconst amount = document.querySelector('input[name=amount]');\nconst form = document.querySelector('.form');\n// position, delay\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  // if (shouldResolve) {\n  //   // Fulfill\n  //   Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  // } else {\n  //   // Reject\n  //   Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  // }\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n\n  promise\n    .then(value => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(error => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\nfunction repetable() {\n  // for(let i = 0; i<parseInt(amount.value) ;i++){\n  // const special = (parseInt(delay.value) + parseInt(step.value)*i)\n  //   // const special = delay.value + step.value*i\n  //   setTimeout(createPromise,special,i+1, special)\n  // }\n  for (let i = 0; i < parseInt(amount.value); i++) {\n    const special = parseInt(delay.value) + parseInt(step.value) * i;\n    createPromise(i + 1, special);\n  }\n}\nconst starting = event => {\n  event.preventDefault();\n  repetable();\n};\nform.addEventListener('submit', starting);\n"],"names":["$eWCmQ","parcelRequire","document","querySelector","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay1","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","then","value","$parcel$interopDefault","Notify","success","catch","error","failure","addEventListener","event","preventDefault","i","parseInt","$47d4ff9957288465$var$repetable"],"version":3,"file":"03-promises.e701a2a0.js.map"}